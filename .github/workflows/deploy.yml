name: Build & Deploy to Docker Hub and AWS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üõ†Ô∏è Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:latest .

      - name: ‚òÅÔ∏è Push image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:latest

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üöÄ Deploy to AWS ECS
        id: get-new-task-ip
        run: |
          CLUSTER_NAME=portfolio
          SERVICE_NAME=Portfolio-service-u5a2doxe

          echo "üîç Getting current task ARN before deployment..."
          OLD_TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$SERVICE_NAME" --desired-status RUNNING --query 'taskArns[0]' --output text)
          echo "Previous task ARN: $OLD_TASK_ARN"

          echo "üöÄ Triggering ECS deployment..."
          aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment

          echo "‚è≥ Waiting for new task to replace the old one..."
          for attempt in {1..30}; do
            NEW_TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$SERVICE_NAME" --desired-status RUNNING --query 'taskArns[0]' --output text)

            if [[ "$NEW_TASK_ARN" != "$OLD_TASK_ARN" && "$NEW_TASK_ARN" != "None" && "$NEW_TASK_ARN" != "" ]]; then
              echo "‚úÖ New task detected: $NEW_TASK_ARN"
              break
            fi

            echo "Still waiting for new task... (attempt $attempt)"
            sleep 10
          done

          if [[ "$NEW_TASK_ARN" == "$OLD_TASK_ARN" || "$NEW_TASK_ARN" == "None" || "$NEW_TASK_ARN" == "" ]]; then
            echo "‚ùå Timed out waiting for new task"
            exit 1
          fi

          echo "üì° Getting ENI and public IP for new task..."
          ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$NEW_TASK_ARN" \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)

          for i in {1..12}; do
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" \
              --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
            if [[ "$PUBLIC_IP" != "None" && "$PUBLIC_IP" != "" ]]; then
              echo "‚úÖ Found public IP: $PUBLIC_IP"
              echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
              exit 0
            fi
            echo "Waiting for public IP assignment..."
            sleep 5
          done

          echo "‚ùå Timed out waiting for public IP"
          exit 1

      - name: Update Cloudflare DNS
        run: |
          ZONE_ID=${{ secrets.CF_ZONE_ID }}
          RECORD_NAME="ddns.tonyg-systems.com"
          CF_API_TOKEN=${{ secrets.CF_API_TOKEN }}

          RECORD_ID=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$RECORD_NAME" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          curl -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"A\",\"name\":\"$RECORD_NAME\",\"content\":\"$PUBLIC_IP\",\"ttl\":120,\"proxied\":true}"
