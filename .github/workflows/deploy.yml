name: Build & Deploy to Docker Hub and AWS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üõ†Ô∏è Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:latest .

      - name: ‚òÅÔ∏è Push image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:latest

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üöÄ Deploy to AWS ECS
        run: |
          aws ecs update-service \
            --cluster portfolio \
            --service Portfolio-service-u5a2doxe \
            --force-new-deployment

      - name: Get ECS task public IP (with wait)
        id: get-ip
        run: |
          CLUSTER_NAME=portfolio
          SERVICE_NAME=Portfolio-service-u5a2doxe

          echo "‚è≥ Waiting for ECS task to start and attach a public IP..."

          # Get task ARN
          TASK_ARN=""
          for i in {1..10}; do
            TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --desired-status RUNNING --query 'taskArns[0]' --output text)
            if [[ "$TASK_ARN" != "None" ]]; then break; fi
            echo "Waiting for task to appear..."
            sleep 5
          done

          if [[ "$TASK_ARN" == "None" ]]; then
            echo "‚ùå No running task found."
            exit 1
          fi

          echo "‚úÖ Task found: $TASK_ARN"
          
          # Wait for the ENI and IP
          for i in {1..10}; do
            ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)

            if [[ "$ENI_ID" != "None" && "$ENI_ID" != "" ]]; then
              PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" \
                --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
              if [[ "$PUBLIC_IP" != "None" && "$PUBLIC_IP" != "" ]]; then
                echo "‚úÖ Found public IP: $PUBLIC_IP"
                echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
                exit 0
              fi
            fi

            echo "Waiting for public IP to be assigned..."
            sleep 5
          done

          echo "‚ùå Failed to get public IP after retries."
          exit 1

      - name: Update Cloudflare DNS
        run: |
          ZONE_ID=${{ secrets.CF_ZONE_ID }}
          RECORD_NAME="ddns.tonyg-systems.com"
          CF_API_TOKEN=${{ secrets.CF_API_TOKEN }}

          RECORD_ID=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$RECORD_NAME" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          curl -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"A\",\"name\":\"$RECORD_NAME\",\"content\":\"$PUBLIC_IP\",\"ttl\":120,\"proxied\":true}"
